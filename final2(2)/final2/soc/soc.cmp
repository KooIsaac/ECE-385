	component soc is
		port (
			clk_clk                 : in    std_logic                     := 'X';             -- clk
			conduit_startpoint      : in    std_logic_vector(12 downto 0) := (others => 'X'); -- startpoint
			conduit_endpoint        : in    std_logic_vector(12 downto 0) := (others => 'X'); -- endpoint
			conduit_done            : out   std_logic;                                        -- done
			conduit_run             : in    std_logic                     := 'X';             -- run
			draw_control_re_ocm     : in    std_logic                     := 'X';             -- re_ocm
			draw_control_writepixel : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- writepixel
			draw_control_writex     : in    std_logic_vector(9 downto 0)  := (others => 'X'); -- writex
			draw_control_writey     : in    std_logic_vector(9 downto 0)  := (others => 'X'); -- writey
			draw_control_drawx      : in    std_logic_vector(9 downto 0)  := (others => 'X'); -- drawx
			draw_control_drawy      : in    std_logic_vector(9 downto 0)  := (others => 'X'); -- drawy
			draw_control_startp     : out   std_logic_vector(12 downto 0);                    -- startp
			draw_control_endp       : out   std_logic_vector(12 downto 0);                    -- endp
			draw_control_we         : in    std_logic                     := 'X';             -- we
			draw_control_run        : in    std_logic                     := 'X';             -- run
			keycode_export          : out   std_logic_vector(7 downto 0);                     -- export
			otg_hpi_address_export  : out   std_logic_vector(1 downto 0);                     -- export
			otg_hpi_cs_export       : out   std_logic;                                        -- export
			otg_hpi_data_in_port    : in    std_logic_vector(15 downto 0) := (others => 'X'); -- in_port
			otg_hpi_data_out_port   : out   std_logic_vector(15 downto 0);                    -- out_port
			otg_hpi_r_export        : out   std_logic;                                        -- export
			otg_hpi_reset_export    : out   std_logic;                                        -- export
			otg_hpi_w_export        : out   std_logic;                                        -- export
			reset_reset_n           : in    std_logic                     := 'X';             -- reset_n
			sdram_clk_clk           : out   std_logic;                                        -- clk
			sdram_wire_addr         : out   std_logic_vector(12 downto 0);                    -- addr
			sdram_wire_ba           : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_wire_cas_n        : out   std_logic;                                        -- cas_n
			sdram_wire_cke          : out   std_logic;                                        -- cke
			sdram_wire_cs_n         : out   std_logic;                                        -- cs_n
			sdram_wire_dq           : inout std_logic_vector(31 downto 0) := (others => 'X'); -- dq
			sdram_wire_dqm          : out   std_logic_vector(3 downto 0);                     -- dqm
			sdram_wire_ras_n        : out   std_logic;                                        -- ras_n
			sdram_wire_we_n         : out   std_logic;                                        -- we_n
			vga_clk_dc_clk          : in    std_logic                     := 'X';             -- clk
			vga_clk_pr_clk          : in    std_logic                     := 'X';             -- clk
			vga_control_red         : out   std_logic_vector(7 downto 0);                     -- red
			vga_control_green       : out   std_logic_vector(7 downto 0);                     -- green
			vga_control_blue        : out   std_logic_vector(7 downto 0);                     -- blue
			vga_control_blank       : in    std_logic                     := 'X'              -- blank
		);
	end component soc;

