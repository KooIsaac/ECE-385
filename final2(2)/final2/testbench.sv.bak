module testbench();

timeunit 10ns;
timeprecision 1ns;

logic 				CLOCK_50;
logic   	[3:0]  	KEY;

/*
// SRAM Interface
wire 		[15:0] 	SRAM_DQ;	  // Data to/from SRAM
logic	   [19:0] 	SRAM_ADDR;	  // Addressing of the SRAM
logic             SRAM_CE_N, 	  // SRAM control signals
						SRAM_UB_N, 	  // Activates 15:8
						SRAM_LB_N, 	  // Activates 7:0
						SRAM_OE_N, 
						SRAM_WE_N;	*/	

// VGA Interface
logic        		VGA_CLK,      //VGA Clock
						VGA_SYNC_N,   //VGA Sync signal
						VGA_BLANK_N,  //VGA Blank signal
						VGA_VS,       //VGA vertical sync signal
						VGA_HS;       //VGA horizontal sync signal
							
logic 	[7:0]  	VGA_R,        //VGA Red
						VGA_G,        //VGA Green
						VGA_B;        //VGA Blue
							
/*							
// CY7C67200 Interface
wire  	[15:0] 	OTG_DATA;     //CY7C67200 Data bus 16 Bits
logic 	[1:0]  	OTG_ADDR;     //CY7C67200 Address 2 Bits

logic        		OTG_CS_N,     //CY7C67200 Chip Select
						OTG_RD_N,     //CY7C67200 Write
						OTG_WR_N,     //CY7C67200 Read
						OTG_RST_N,    //CY7C67200 Reset
						OTG_INT;      //CY7C67200 Interrupt

// SDRAM Interface for Nios II Software
logic [12:0] 		DRAM_ADDR;    //SDRAM Address 13 Bits
wire  [31:0] 		DRAM_DQ;      //SDRAM Data 32 Bits
logic [1:0]  		DRAM_BA;      //SDRAM Bank Address 2 Bits
logic [3:0]  		DRAM_DQM;     //SDRAM Data Mast 4 Bits
logic        		DRAM_RAS_N,   //SDRAM Row Address Strobe
						DRAM_CAS_N,   //SDRAM Column Address Strobe
						DRAM_CKE,     //SDRAM Clock Enable
						DRAM_WE_N,    //SDRAM Write Enable
						DRAM_CS_N,    //SDRAM Chip Select
						DRAM_CLK;      //SDRAM Clock
*/

logic [9:0] DrawX, DrawY;

toplevel toplevel(.*);


always begin
#1
	DrawX = toplevel.DrawX;
	DrawY = toplevel.DrawY;
	MapX = toplevel.MapX;
	MapY = toplevel.MapY;
	MapSel = toplevel.MapSel;
	hc = toplevel.VGA.hc;
	vc = toplevel.VGA.vc;
	TilesX = toplevel.MapSprites.TilesX;
	TilesY = toplevel.MapSprites.TilesY;
	Coordinates = toplevel.MapSprites.Coordinates;
	valid_SRAM = toplevel.Palette.valid_SRAM;
	ColorSelectNext = toplevel.Palette.ColorSelectNext;
	TopLeftX = toplevel.MapRender.TopLeftX;
	TopLeftY = toplevel.MapRender.TopLeftY;
	GenericX = toplevel.MapRender.GenericX;
	GenericY = toplevel.MapRender.GenericY;
	MapperX = toplevel.MapRender.MapperX;
	MapperY = toplevel.MapRender.MapperY;

end

always begin : CLOCK_GENERATION 
#1 CLOCK_50 = ~CLOCK_50;
end

initial begin: CLOCK_INITIALIZATION 
	CLOCK_50 = 0;
end

initial begin : RUN
	   KEY[0] = 0;
	#2 KEY[0] = 1;
end

endmodule
	




























